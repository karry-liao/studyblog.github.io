(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{715:function(t,v,_){t.exports=_.p+"assets/img/last-modified.c8f125e5.png"},716:function(t,v,_){t.exports=_.p+"assets/img/navigator1.3636a3fc.png"},717:function(t,v,_){t.exports=_.p+"assets/img/navigator2.841bf50e.png"},718:function(t,v,_){t.exports=_.p+"assets/img/screen.390ea544.png"},862:function(t,v,_){"use strict";_.r(v);var e=_(16),a=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"web的缓存机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#web的缓存机制"}},[t._v("#")]),t._v(" Web的缓存机制")]),t._v(" "),v("p",[t._v("​\t\t什么是web缓存？ 主要指浏览器缓存和http缓存，http缓存是web缓存的核心，为重要部分。")]),t._v(" "),v("p",[t._v("浏览器缓存："),v("strong",[t._v("localStorage")]),t._v(","),v("strong",[t._v("sessionStorage")]),t._v(","),v("strong",[t._v("cookie")]),t._v("。这些功能主要用于缓存一些必要的数据，比如用户信息。比如需要携带到后端的参数。亦或者是一些列表数据等等。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("区别")]),t._v(" "),v("th",[v("strong",[t._v("localStorage")])]),t._v(" "),v("th",[t._v("sessionStorage")]),t._v(" "),v("th",[v("strong",[t._v("cookie")])])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("缓存容量")]),t._v(" "),v("td",[t._v("5M")]),t._v(" "),v("td",[t._v("5M")]),t._v(" "),v("td",[t._v("4kb")])]),t._v(" "),v("tr",[v("td",[t._v("缓存范围")]),t._v(" "),v("td",[t._v("可跨页面通讯")]),t._v(" "),v("td",[t._v("不可跨页面通讯")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("缓存时长")]),t._v(" "),v("td",[t._v("需手动清楚，否则一直在")]),t._v(" "),v("td",[t._v("关闭页面后自动清除")]),t._v(" "),v("td",[t._v("需设置过期时间")])]),t._v(" "),v("tr",[v("td",[t._v("使用方式")]),t._v(" "),v("td",[t._v("getItem, setItem,removeItem,clear")]),t._v(" "),v("td",[t._v("getItem, setItem,removeItem,clear")]),t._v(" "),v("td")])])]),t._v(" "),v("h3",{attrs:{id:"缓存解决的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存解决的问题"}},[t._v("#")]),t._v(" 缓存解决的问题：")]),t._v(" "),v("ol",[v("li",[t._v("​\t\t减少不必要的网络传输，节约宽带，")]),t._v(" "),v("li",[t._v("​\t\t更快的加载页面，")]),t._v(" "),v("li",[t._v("​\t\t减少服务器负载，避免服务器过载")])]),t._v(" "),v("h5",{attrs:{id:"http缓存又分为-强缓存和协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http缓存又分为-强缓存和协商缓存"}},[t._v("#")]),t._v(" "),v("strong",[t._v("http缓存又分为：强缓存和协商缓存")])]),t._v(" "),v("h6",{attrs:{id:"基于cache-control实现的抢缓存-代替expires的强缓存实现方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于cache-control实现的抢缓存-代替expires的强缓存实现方法"}},[t._v("#")]),t._v(" 基于Cache-control实现的抢缓存（代替Expires的强缓存实现方法）")]),t._v(" "),v("p",[v("strong",[t._v("Cache-controld的使用方法：")])]),t._v(" "),v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//往响应头中写入需要缓存的时间")]),t._v("\nres"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'Cache-Control'")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'max-age=10'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("ul",[v("li",[v("p",[v("strong",[t._v("max-age=N")]),t._v("决定客户端资源被缓存多久。N代表缓存时间代为为秒")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("s-maxage")]),t._v("决定代理服务器缓存的时长。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("no-cache")]),t._v("表示是强制进行协商缓存。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("no-store")]),t._v("是表示禁止任何缓存策略。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("public")]),t._v("表示资源即可以被浏览器缓存也可以被代理服务器缓存。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("private")]),t._v("表示资源只能被浏览器缓存。 （默认值）")]),t._v(" "),v("h6",{attrs:{id:"基于last-modified的协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于last-modified的协商缓存"}},[t._v("#")]),t._v(" 基于last-modified的协商缓存")]),t._v(" "),v("ol",[v("li",[t._v("首先需要在服务器端读出文件修改时间，")]),t._v(" "),v("li",[t._v("将读出来的修改时间赋给响应头的"),v("code",[t._v("last-modified")]),t._v("字段。")]),t._v(" "),v("li",[t._v("最后设置"),v("code",[t._v("Cache-control:no-cache")])])]),t._v(" "),v("p",[t._v("代码如下：")]),t._v(" "),v("img",{attrs:{src:_(715)}}),t._v(" "),v("p",[t._v("​    4.当客户端读取到"),v("code",[t._v("last-modified")]),t._v("的时候，会在下次的请求标头中携带一个字段:"),v("code",[t._v("If-Modified-Since")]),t._v("。")]),t._v(" "),v("p",[t._v("​\t\t而这个请求头中的"),v("code",[t._v("If-Modified-Since")]),t._v("就是服务器第一次修改时候给他的时间，也就是上图中的")])])]),t._v(" "),v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[t._v("res"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'last-modified'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mtime"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUTCString")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("​\t\t"),v("strong",[t._v("那么之后每次对该资源的请求，都会带上"),v("code",[t._v("If-Modified-Since")]),t._v("这个字段，而务端就需要拿到这个时间并再次读取该资源的修改时间，让他们两个做一个比对来决定是读取缓存还是返回新的资源。")])]),t._v(" "),v("p",[t._v("​\t\t"),v("strong",[t._v("由于以上协商缓存是通过文件的修改时间来判断是否更改而产生的，那么当文件来回修改文件名时，文件内容没修改，儿缓存依然失效了，还有一种情况是文件修改时间的最小单位是秒，当文件在几百毫秒内完成修改，文件修改时间不会发生改变，即当文件内容修改了，依然不会返回新的文件。")])]),t._v(" "),v("p",[t._v("​\t\t为解决上面两个问题，从http1.1新增了一个头信息，ETag（entity 实体标签）")]),t._v(" "),v("p",[t._v("ETag：将原先协商缓存的比较"),v("strong",[t._v("时间戳")]),t._v("的形式修改成了比较**文件指纹（根据文件内容计算出的唯一哈希值。文件内容一旦改变则指纹改变）。")]),t._v(" "),v("h3",{attrs:{id:"as-total"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#as-total"}},[t._v("#")]),t._v(" As Total")]),t._v(" "),v("ul",[v("li",[t._v("http缓存可以减少宽带流量，加快响应速度。")]),t._v(" "),v("li",[t._v("关于强缓存，"),v("code",[t._v("cache-control")]),t._v("是"),v("code",[t._v("Expires")]),t._v("的完全替代方案，在可以使用"),v("code",[t._v("cache-control")]),t._v("的情况下不要使用"),v("code",[t._v("expires")])]),t._v(" "),v("li",[t._v("关于协商缓存,"),v("code",[t._v("etag")]),t._v("并不是"),v("code",[t._v("last-modified")]),t._v("的完全替代方案，而是补充方案，具体用哪一个，取决于业务场景。")]),t._v(" "),v("li",[t._v("有些缓存是从磁盘读取，有些缓存是从内存读取，有什么区别？答：从内存读取的缓存更快。")]),t._v(" "),v("li",[t._v("所有带304的资源都是协商缓存，所有标注（从内存中读取/从磁盘中读取）的资源都是强缓存。")])]),t._v(" "),v("h2",{attrs:{id:"bom的理解以及bom对象有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bom的理解以及bom对象有哪些"}},[t._v("#")]),t._v(" BOM的理解以及BOM对象有哪些？")]),t._v(" "),v("p",[v("code",[t._v("BOM")]),t._v(" (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("Window："),v("code",[t._v("Bom")]),t._v("的核心对象是"),v("code",[t._v("window")]),t._v("，它表示浏览器的一个实例")]),t._v(" "),v("p",[t._v("在浏览器中，"),v("code",[t._v("window")]),t._v("对象有双重角色，即是浏览器窗口的一个接口，又是全局对象")]),t._v(" "),v("p",[t._v("因此所有在全局作用域中声明的变量、函数都会变成"),v("code",[t._v("window")]),t._v("对象的属性和方法")])]),t._v(" "),v("li",[v("p",[t._v("Location："),v("code",[t._v("location")]),t._v("属性描述如下：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[t._v("属性名")])]),t._v(" "),v("th",[t._v("例子")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("hash")]),t._v(" "),v("td",[t._v('"#contents"')]),t._v(" "),v("td",[t._v("utl中#后面的字符，没有则返回空串")])]),t._v(" "),v("tr",[v("td",[t._v("host")]),t._v(" "),v("td",[t._v("www.wrox.com:80")]),t._v(" "),v("td",[t._v("服务器名称和端口号")])]),t._v(" "),v("tr",[v("td",[t._v("hostname")]),t._v(" "),v("td",[t._v("www.wrox.com")]),t._v(" "),v("td",[t._v("域名，不带端口号")])]),t._v(" "),v("tr",[v("td",[t._v("href")]),t._v(" "),v("td",[t._v("http://www.xxox.com:80/yale/?q=javascript#contents")]),t._v(" "),v("td",[t._v("完整url")])]),t._v(" "),v("tr",[v("td",[t._v("pathname")]),t._v(" "),v("td",[t._v('"/WileyCDA/"')]),t._v(" "),v("td",[t._v("服务器下面的文件路径")])]),t._v(" "),v("tr",[v("td",[t._v("port")]),t._v(" "),v("td",[t._v("80")]),t._v(" "),v("td",[t._v("url的端口号，没有则为空")])]),t._v(" "),v("tr",[v("td",[t._v("protocol")]),t._v(" "),v("td",[t._v("http:")]),t._v(" "),v("td",[t._v("使用的协议")])]),t._v(" "),v("tr",[v("td",[t._v("search")]),t._v(" "),v("td",[t._v("?q=javascript")]),t._v(" "),v("td",[t._v("url的查询字符串，通常为？后面的内容")])])])]),t._v(" "),v("p",[v("code",[t._v("location.reload()")]),t._v("，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载")])]),t._v(" "),v("li",[v("p",[t._v("navigator："),v("code",[t._v("navigator")]),t._v(" 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂")]),t._v(" "),v("img",{attrs:{src:_(716)}}),t._v(" "),v("img",{attrs:{src:_(717)}})]),t._v(" "),v("li",[v("p",[t._v("screen:保存的纯粹是客户端能力信息，也就是浏览器窗口外面的客户端显示器的信息，比如像素宽度和像素高度")]),t._v(" "),v("img",{attrs:{src:_(718)}})]),t._v(" "),v("li",[v("p",[t._v("history")])])]),t._v(" "),v("p",[v("code",[t._v("history")]),t._v("对象主要用来操作浏览器"),v("code",[t._v("URL")]),t._v("的历史记录，可以通过参数向前，向后，或者向指定"),v("code",[t._v("URL")]),t._v("跳转")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("history.go()")]),t._v(":接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转，")]),t._v(" "),v("li",[v("code",[t._v("history.forward()")]),t._v("：向前跳转一个页面")]),t._v(" "),v("li",[v("code",[t._v("history.back()")]),t._v("：向后跳转一个页面")]),t._v(" "),v("li",[v("code",[t._v("history.length")]),t._v("：获取历史记录数")])]),t._v(" "),v("h2",{attrs:{id:"常见的dom操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的dom操作"}},[t._v("#")]),t._v(" 常见的DOM操作")]),t._v(" "),v("p",[t._v("文档对象模型 (DOM) 是 "),v("code",[t._v("HTML")]),t._v(" 和 "),v("code",[t._v("XML")]),t._v(" 文档的编程接口")]),t._v(" "),v("p",[t._v("下面就来分析"),v("code",[t._v("DOM")]),t._v("常见的操作，主要分为：")]),t._v(" "),v("ul",[v("li",[t._v("创建节点：")])]),t._v(" "),v("p",[t._v("创建新元素，接受一个参数，即要创建元素的标签名")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('const divEl = document.createElement("div");\n')])])]),v("p",[t._v("创建一个文本节点")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('const textEl = document.createTextNode("content");\n')])])]),v("p",[t._v("用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到"),v("code",[t._v("DOM")]),t._v("中")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("const fragment = document.createDocumentFragment();\n")])])]),v("p",[t._v("创建属性节点，可以是自定义属性")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("const dataAttribute = document.createAttribute('custom'); consle.log(dataAttribute);\n")])])]),v("ul",[v("li",[t._v("查询节点：")])]),t._v(" "),v("h3",{attrs:{id:"获取节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取节点"}},[t._v("#")]),t._v(" 获取节点")]),t._v(" "),v("h4",{attrs:{id:"queryselector"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#queryselector"}},[t._v("#")]),t._v(" querySelector")]),t._v(" "),v("p",[t._v("传入任何有效的"),v("code",[t._v("css")]),t._v(" 选择器，即可选中单个 "),v("code",[t._v("DOM")]),t._v("元素（首个）：")]),t._v(" "),v("p",[t._v("如果页面上没有指定的元素时，返回 "),v("code",[t._v("null")])]),t._v(" "),v("h4",{attrs:{id:"queryselectorall"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#queryselectorall"}},[t._v("#")]),t._v(" querySelectorAll")]),t._v(" "),v("p",[t._v("返回一个包含节点子树内所有与之相匹配的"),v("code",[t._v("Element")]),t._v("节点列表，如果没有相匹配的，则返回一个空节点列表")]),t._v(" "),v("ul",[v("li",[t._v("更新节点")])]),t._v(" "),v("h4",{attrs:{id:"innerhtml"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innerhtml"}},[t._v("#")]),t._v(" innerHTML")]),t._v(" "),v("p",[t._v("不但可以修改一个"),v("code",[t._v("DOM")]),t._v("节点的文本内容，还可以直接通过"),v("code",[t._v("HTML")]),t._v("片段修改"),v("code",[t._v("DOM")]),t._v("节点内部的子树")]),t._v(" "),v("h4",{attrs:{id:"innertext、textcontent"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innertext、textcontent"}},[t._v("#")]),t._v(" innerText、textContent")]),t._v(" "),v("p",[t._v("自动对字符串进行"),v("code",[t._v("HTML")]),t._v("编码，保证无法设置任何"),v("code",[t._v("HTML")]),t._v("标签")]),t._v(" "),v("h4",{attrs:{id:"style"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#style"}},[t._v("#")]),t._v(" style")]),t._v(" "),v("ul",[v("li",[t._v("添加节点")])]),t._v(" "),v("h4",{attrs:{id:"appendchild"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#appendchild"}},[t._v("#")]),t._v(" appendChild")]),t._v(" "),v("p",[t._v("把一个子节点添加到父节点的最后一个子节点")]),t._v(" "),v("h4",{attrs:{id:"innerhtml-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#innerhtml-2"}},[t._v("#")]),t._v(" innerHTML")]),t._v(" "),v("p",[t._v("如果这个DOM节点是空的，例如，"),v("code",[t._v("<div></div>")]),t._v("，那么，直接使用"),v("code",[t._v("innerHTML = '<span>child</span>'")]),t._v("就可以修改"),v("code",[t._v("DOM")]),t._v("节点的内容，相当于添加了新的"),v("code",[t._v("DOM")]),t._v("节点")]),t._v(" "),v("h4",{attrs:{id:"insertbefore"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#insertbefore"}},[t._v("#")]),t._v(" insertBefore")]),t._v(" "),v("h4",{attrs:{id:"setattribute"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setattribute"}},[t._v("#")]),t._v(" setAttribute")]),t._v(" "),v("p",[t._v("在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值")]),t._v(" "),v("ul",[v("li",[t._v("删除节点")])]),t._v(" "),v("p",[t._v("删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的"),v("code",[t._v("removeChild")]),t._v("把自己删掉")]),t._v(" "),v("p",[t._v("删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置")])])}),[],!1,null,null,null);v.default=a.exports}}]);