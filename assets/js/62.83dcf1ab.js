(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{833:function(t,a,s){"use strict";s.r(a);var e=s(16),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"es6中的set和map的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6中的set和map的区别"}},[t._v("#")]),t._v(" ES6中的Set和Map的区别")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("是一种叫做集合的数据结构，"),a("code",[t._v("Map")]),t._v("是一种叫做字典的数据结构")]),t._v(" "),a("p",[t._v("什么是集合？什么又是字典？")]),t._v(" "),a("ul",[a("li",[t._v("集合\n是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合")]),t._v(" "),a("li",[t._v("字典\n是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同")])]),t._v(" "),a("p",[t._v("区别？")]),t._v(" "),a("ul",[a("li",[t._v("共同点：集合、字典都可以存储不重复的值")]),t._v(" "),a("li",[t._v("不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储")])]),t._v(" "),a("h2",{attrs:{id:"一、set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、set"}},[t._v("#")]),t._v(" 一、Set")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("是"),a("code",[t._v("es6")]),t._v("新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("本身是一个构造函数，用来生成 Set 数据结构")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"二、map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、map"}},[t._v("#")]),t._v(" 二、Map")]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v("类型是键值对的有序列表，而键和值都可以是任意类型")]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v("本身是一个构造函数，用来生成 "),a("code",[t._v("Map")]),t._v(" 数据结构")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("遍历方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Set")]),t._v(" "),a("td",[t._v("add(),delete(),has(),clear()")]),t._v(" "),a("td",[t._v("keys(),values(),entries(),forEach()")])]),t._v(" "),a("tr",[a("td",[t._v("Map")]),t._v(" "),a("td",[a("strong",[t._v("Size()")]),t._v(",set(),get(),has(),delete(),clear()")]),t._v(" "),a("td",[t._v("keys(),values(),entries(),forEach()")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"三、weakset-和-weakmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、weakset-和-weakmap"}},[t._v("#")]),t._v(" 三、WeakSet 和 WeakMap")]),t._v(" "),a("h3",{attrs:{id:"weakset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[t._v("#")]),t._v(" WeakSet")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ws "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("WeakSet ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("可以接受一个具有 "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Iterable ")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("接口的对象作为参数\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ws "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WeakSet {[1, 2], [3, 4]}")]),t._v("\n")])])]),a("p",[t._v("在"),a("code",[t._v("API")]),t._v("中"),a("code",[t._v("WeakSet")]),t._v("与"),a("code",[t._v("Set")]),t._v("有两个区别：")]),t._v(" "),a("ul",[a("li",[t._v("没有遍历操作的"),a("code",[t._v("API")])]),t._v(" "),a("li",[t._v("没有"),a("code",[t._v("size")]),t._v("属性")])]),t._v(" "),a("p",[a("code",[t._v("WeackSet")]),t._v("只能成员只能是引用类型，而不能是其他类型的值,"),a("code",[t._v("WeakSet")]),t._v("里面的引用只要在外部消失，它在 "),a("code",[t._v("WeakSet")]),t._v("里面的引用就会自动消失")]),t._v(" "),a("h3",{attrs:{id:"weakmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[t._v("#")]),t._v(" WeakMap")]),t._v(" "),a("p",[a("code",[t._v("WeakMap")]),t._v("结构与"),a("code",[t._v("Map")]),t._v("结构类似，也是用于生成键值对的集合")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("API")]),t._v("中"),a("code",[t._v("WeakMap")]),t._v("与"),a("code",[t._v("Map")]),t._v("有两个区别：")]),t._v(" "),a("ul",[a("li",[t._v("没有遍历操作的"),a("code",[t._v("API")])]),t._v(" "),a("li",[t._v("没有"),a("code",[t._v("clear")]),t._v("清空方法")])]),t._v(" "),a("p",[a("code",[t._v("WeakMap")]),t._v("只接受对象作为键名（"),a("code",[t._v("null")]),t._v("除外），不接受其他类型的值作为键名")]),t._v(" "),a("p",[a("code",[t._v("WeakMap")]),t._v("的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用")])])}),[],!1,null,null,null);a.default=n.exports}}]);